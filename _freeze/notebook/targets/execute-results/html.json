{
  "hash": "85f5b3456c37b7cf1842992d890d9aee",
  "result": {
    "markdown": "---\ntitle: \"Targets workflow\"\n---\n\n\n\n\n# targets pipeline\n\nWe use [the magical {targets} package](https://docs.ropensci.org/targets/) to run our analysis and keep track of all dependencies automatically.\n\nTo build our entire project, run `targets::tar_make()` at the R console.\n\nHere's our complete pipeline:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntargets::tar_glimpse()\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"visNetwork html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-026000d9d46a8a76fffe\" style=\"width:100%;height:417px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-026000d9d46a8a76fffe\">{\"x\":{\"nodes\":{\"name\":[\"deploy_script\",\"deploy\",\"website\",\"acs_clean\",\"acs_vars_file\"],\"type\":[\"stem\",\"stem\",\"stem\",\"stem\",\"stem\"],\"status\":[\"none\",\"none\",\"none\",\"none\",\"none\"],\"seconds\":[null,null,null,null,null],\"bytes\":[null,null,null,null,null],\"branches\":[null,null,null,null,null],\"label\":[\"deploy_script\",\"deploy\",\"website\",\"acs_clean\",\"acs_vars_file\"],\"color\":[\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\",\"#94a4ac\"],\"id\":[\"deploy_script\",\"deploy\",\"website\",\"acs_clean\",\"acs_vars_file\"],\"level\":[1,4,3,2,1],\"shape\":[\"dot\",\"dot\",\"dot\",\"dot\",\"dot\"]},\"edges\":{\"from\":[\"deploy_script\",\"website\",\"acs_clean\",\"acs_vars_file\"],\"to\":[\"deploy\",\"deploy\",\"website\",\"acs_clean\"],\"arrows\":[\"to\",\"to\",\"to\",\"to\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":{\"type\":\"cubicBezier\",\"forceDirection\":\"horizontal\"}},\"physics\":{\"stabilization\":false},\"interaction\":{\"zoomSpeed\":1},\"layout\":{\"hierarchical\":{\"enabled\":true,\"direction\":\"LR\"}}},\"groups\":null,\"width\":null,\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"highlight\":{\"enabled\":true,\"hoverNearest\":false,\"degree\":{\"from\":1,\"to\":1},\"algorithm\":\"hierarchical\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":true,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"},\"legend\":{\"width\":0.2,\"useGroups\":false,\"position\":\"right\",\"ncol\":1,\"stepX\":100,\"stepY\":100,\"zoom\":true,\"nodes\":{\"label\":[\"Stem\"],\"shape\":[\"dot\"],\"color\":[\"#899DA4\"]},\"nodesToDataframe\":true},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n# Actual code\n\nAll the data processing and analysis is handled with dataset-specific functions that live in `R/`, which **`targets`** then runs as needed. For the sake of transparency, here's all that code:\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n#### `R/funs_acs_data.R`\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclean_acs_data <- function(acs_vars_file) {\n  library(tidycensus)\n  \n  acs_vars <- read_csv(acs_vars_file, show_col_types = FALSE)\n  \n  acs_raw_bg <- get_acs(\n    geography = \"block group\",\n    variables = filter(acs_vars, geography == \"block group\")$name,\n    state = 53, year = 2019, survey = \"acs5\"\n  )\n\n  acs_raw_tract <- get_acs(\n    geography = \"tract\",\n    variables = filter(acs_vars, geography == \"tract\")$name,\n    state = 53, year = 2019, survey = \"acs5\"\n  )\n  \n  acs_bg <- acs_raw_bg %>% \n    select(-NAME, -moe) %>% \n    pivot_wider(names_from = \"variable\", values_from = \"estimate\") %>% \n    mutate(\n      bg_pct_married = (B12001_004 + B12001_013) / B12001_001,\n      bg_pct_kids = B11005_002 / B11005_001,\n      bg_pct_hs_plus = (B15003_017 + B15003_018 + B15003_019 + B15003_020 + B15003_021 + \n                          B15003_022 + B15003_023 + B15003_024 + B15003_025) / B15003_001,\n      bg_pct_enrolled_college = (B14002_019 + B14002_022 + B14002_043 + B14002_046) / B14002_001,\n      bg_pct_veteran = B21001_002 / B21001_001,\n      bg_pct_computer_internet = B28003_004 / B28003_001,\n      bg_income_percapita = B19301_001,\n      bg_pct_employed = B23025_002 / B23025_001,\n      bg_pct_commute_public = B08301_010 / B08301_001,\n      bg_pct_work_home = B08301_021 / B08301_001,\n      bg_pct_ind_construction = (C24030_006 + C24030_033) / C24030_001,\n      bg_pct_ind_manufacturing = (C24030_007 + C24030_034) / C24030_001,\n      bg_pct_ind_retail = (C24030_009 + C24030_036) / C24030_001,\n      bg_pct_ind_edu_health_social = (C24030_021 + C24030_048) / C24030_001,\n      bg_pct_ind_acc_food = (C24030_026 + C24030_053) / C24030_001,\n      bg_pct_ind_covid = (C24030_006 + C24030_033 + C24030_007 + C24030_034 + \n                            C24030_009 + C24030_036 + C24030_021 + C24030_048 + \n                            C24030_026 + C24030_053) / C24030_001,\n      bg_pct_uninsured = (B27010_017 + B27010_033 + B27010_050 + B27010_066) / B27010_001,\n      bg_pct_poverty100 = (C17002_002 + C17002_003) / C17002_001,\n      bg_pct_poverty200 = 1 - (C17002_008 / C17002_001),\n      bg_high_rent = (B25070_008 + B25070_009 + B25070_010) / B25070_001,\n      bg_population = B01003_001,\n      bg_pct_female = B01001_026 / B01001_001,\n      bg_pct_working_age = (B01001_007 + B01001_008 + B01001_009 + B01001_010 + B01001_011 + \n                              B01001_012 + B01001_013 + B01001_014 + B01001_015 + B01001_016 + \n                              B01001_017 + B01001_018 + B01001_019 + B01001_020 +\n                              B01001_031 + B01001_032 + B01001_033 + B01001_034 + B01001_035 + \n                              B01001_036 + B01001_037 + B01001_038 + B01001_039 + B01001_040 + \n                              B01001_041 + B01001_042 + B01001_043 + B01001_044) / B01001_001,\n      bg_pct_nonwhite = 1 - (B03002_003 / B03002_001)\n    ) %>% \n    mutate(tract = str_sub(GEOID, start = 1, end = -2)) %>% \n    select(GEOID, tract, starts_with(\"bg_\")) %>% \n    mutate(across(starts_with(\"bg_\"), ~ifelse(is.nan(.), 0, .)))\n  \n  acs_tract <- acs_raw_tract %>% \n    select(-NAME, -moe) %>% \n    pivot_wider(names_from = \"variable\", values_from = \"estimate\") %>% \n    mutate(\n      tr_pct_snap = B22003_002 / B22003_001,\n      tr_pct_no_car = B08014_002 / B08014_001\n    ) %>% \n    select(GEOID, starts_with(\"tr_\")) %>% \n    mutate(across(starts_with(\"tr_\"), ~ifelse(is.nan(.), 0, .)))\n  \n  # This joins the tract-level values to the block group-level rows, which isn't\n  # ideal, but it'll have to do for these two tract-level variables\n  acs_clean <- acs_bg %>% \n    left_join(acs_tract, by = join_by(tract == GEOID))\n  \n  return(acs_clean)\n}\n```\n:::\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/htmlwidgets-1.6.1/htmlwidgets.js\"></script>\n<link href=\"../site_libs/vis-9.1.0/vis-network.min.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/vis-9.1.0/vis-network.min.js\"></script>\n<script src=\"../site_libs/visNetwork-binding-2.1.0/visNetwork.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}